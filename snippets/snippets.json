{
	"snapshot": {
		"description": "Snapshot test",
		"prefix": ">snap",
		"scope": "javascript",
		"body": [
			"// @flow",
			"import React from 'react';",
			"import { shallow } from 'enzyme';",
			"import toJson from 'enzyme-to-json';",
			"",
			"import ${1:component} from '@${2:path}/${1:component}';",
			"",
			"it('${1:component} renders correctly', () => {",
			"  const component = shallow(<${1:component} />);",
			"  const tree = toJson(component);",
			"  expect(tree).toMatchSnapshot();",
			"});",
			""		
		]
	},
	"snapStyled": {
		"description": "Snapshot for styled component",
		"prefix": ">snap-styled",
		"scope": "javascript",
		"body": [
			"// @flow",
			"import React from 'react';",
			"import { shallow } from 'enzyme';",
			"import toJson from 'enzyme-to-json';",
			"import 'jest-styled-components';",
			"",
			"import ${1:component} from '@${2:path}/${1:component}';",
			"",
			"it('${1:component} renders the correct style', () => {",
			"  const component = shallow(<${1:component} />);",
			"  const tree = toJson(component);",
			"  expect(tree).toMatchSnapshot();",
			"});",
			""
		]
	},
	"enzymeClick": {
		"description": "Checks the onClick prop for a component",
		"prefix": ">enzyme-click",
		"scope": "javascript",
		"body": [
			"// @flow",
			"import React from 'react';",
			"import { shallow } from 'enzyme';",
			"",
			"import ${1:component} from '@${2:path}/${1:component}';",
			"",
			"describe('OnClick prop called for ${1:component}', () => {",
			"  it('Calls the onClick prop when clicked', () => {",
			"    const onClickMock = jest.fn();",
			"    const component = shallow(<${1:component} onClick={onClickMock} />);",
			"",
			"    component.simulate('click');",
			"    expect(onClickMock).toHaveBeenCalledTimes(1);",
			"  });",
			"});",
			""
		]
	},
	"reactPureComponent": {
		"description": "React Pure Component",
		"prefix": ">rpc",
		"scope": "javascript",
		"body": [
			"// @flow",
			"import React, { PureComponent } from 'react';",
			"import styled from 'styled-components';",
			"",
			"type Props = {};",
			"",
			"class ${1:component} extends PureComponent<Props> {",
			"  render() {",
			"    return (",
			"      $0",
			"    );",
			"  }",
			"}",
			"",
			"export default ${1:component};",
			""
		]
	},
	"consoleLog": {
		"description": "Quick Console Logs",
		"prefix": ">cl",
		"scope": "javascript",
		"body": [
			"console.log('')",
			"console.log('')",
			"console.log(${1:print})",
			"console.log('')",
			"console.log('')"
		]
	},
	"djTest": {
		"description": "Django TestCase setup",
		"prefix": ">dj-test",
		"scope": "python",
		"body": [
			"\"\"\"",
			"Test the ${1:module} Module",
			"\"\"\"",
			"from django.test import TestCase",
			"",
			"class ${1:module}TestCase(TestCase):",
			"    \"\"\"",
			"    Test the ${1:module} Module",
			"    \"\"\"",
			"",
			"    def test_${2:test_name}(self):",
			"        \"\"\"",
			"        Tests ${3:test_description}",
			"        \"\"\"",
			"        $0",
			"        self.assertEqual()",
			""
		]
	},
	"djTestView": {
		"description": "Tests a django view",
		"prefix": ">dj-test-view",
		"scope": "python",
		"body": [
			"\"\"\"",
			"${1:View} test case",
			"\"\"\"",
			"",
			"from django.test import TestCase, Client",
			"",
			"class ${1:View}ViewTestCase(TestCase):",
			"    \"\"\"",
			"    ${1:View} test case",
			"    \"\"\"",
			"    def setUp(self):",
			"        \"\"\"",
			"        Sets up client",
			"        \"\"\"",
			"        self.client = Client()",
			"",
			"    def test_get(self):",
			"        \"\"\"",
			"        Tests a GET request",
			"        \"\"\"",
			"        response = self.client.get('${2:url}')",
			"        self.assertEqual(response.status_code, 200)",
			"        self.assertEqual(response.data, {$0})",
			""
		]
	},	
	"pdb": {
		"description": "Pdb Debug",
		"prefix": ">pdb",
		"scope": "python",
		"body": [
			"import pdb; pdb.set_trace()"
		]
	},
	"pythonPrint": {
		"description": "Python Print",
		"prefix": ">pr",
		"scope": "python",
		"body": [
			"print('')",
			"print('')",
			"print(${1:print})",
			"print('')",
			"print('')"
		]
	}
	
}
